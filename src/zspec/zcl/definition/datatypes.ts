/**
 * This file was automatically generated by scripts/zap-update-types.ts. Do NOT edit manually.
 *
 * ZCL data type definitions.
 */

/**
 * @type enum8
 */
export enum ZclType {
    Nodata = 0x00,
    Data8 = 0x08,
    Data16 = 0x09,
    Data24 = 0x0a,
    Data32 = 0x0b,
    Data40 = 0x0c,
    Data48 = 0x0d,
    Data56 = 0x0e,
    Data64 = 0x0f,
    Bool = 0x10,
    Map8 = 0x18,
    Map16 = 0x19,
    Map24 = 0x1a,
    Map32 = 0x1b,
    Map40 = 0x1c,
    Map48 = 0x1d,
    Map56 = 0x1e,
    Map64 = 0x1f,
    Uint8 = 0x20,
    Uint16 = 0x21,
    Uint24 = 0x22,
    Uint32 = 0x23,
    Uint40 = 0x24,
    Uint48 = 0x25,
    Uint56 = 0x26,
    Uint64 = 0x27,
    Int8 = 0x28,
    Int16 = 0x29,
    Int24 = 0x2a,
    Int32 = 0x2b,
    Int40 = 0x2c,
    Int48 = 0x2d,
    Int56 = 0x2e,
    Int64 = 0x2f,
    Enum8 = 0x30,
    Enum16 = 0x31,
    Semi = 0x38,
    Single = 0x39,
    Double = 0x3a,
    Octstr = 0x41,
    String = 0x42,
    Octstr16 = 0x43,
    String16 = 0x44,
    Array = 0x48,
    Struct = 0x4c,
    Set = 0x50,
    Bag = 0x51,
    ToD = 0xe0,
    Date = 0xe1,
    Utc = 0xe2,
    ClusterId = 0xe8,
    AttribId = 0xe9,
    BacOid = 0xea,
    Eui64 = 0xf0,
    Key128 = 0xf1,
    Unk = 0xff,
}

/**
 * @type enum8
 */
export enum AttributeReportingStatus {
    Pending = 0x00,
    Complete = 0x01,
}

/**
 * @type enum8
 */
export enum ZclStatus {
    Success = 0x00,
    Failure = 0x01,
    NotAuthorized = 0x7e,
    MalformedCommand = 0x80,
    UnsupClusterCommand = 0x81,
    UnsupGeneralCommand = 0x82,
    UnsupManufClusterCommand = 0x83,
    UnsupManufGeneralCommand = 0x84,
    InvalidField = 0x85,
    UnsupportedAttribute = 0x86,
    InvalidValue = 0x87,
    ReadOnly = 0x88,
    InsufficientSpace = 0x89,
    DuplicateExists = 0x8a,
    NotFound = 0x8b,
    UnreportableAttribute = 0x8c,
    InvalidDataType = 0x8d,
    InvalidSelector = 0x8e,
    WriteOnly = 0x8f,
    InconsistentStartupState = 0x90,
    DefinedOutOfBand = 0x91,
    Inconsistent = 0x92,
    ActionDenied = 0x93,
    Timeout = 0x94,
    Abort = 0x95,
    InvalidImage = 0x96,
    WaitForData = 0x97,
    NoImageAvailable = 0x98,
    RequireMoreImage = 0x99,
    NotificationPending = 0x9a,
    HardwareFailure = 0xc0,
    SoftwareFailure = 0xc1,
    CalibrationError = 0xc2,
    UnsupportedCluster = 0xc3,
    LimitReached = 0xc4,
}

/**
 * @type enum8
 */
export enum ProfileIntervalPeriod {
    Daily = 0x00,
    Six0minutes = 0x01,
    Three0minutes = 0x02,
    One5minutes = 0x03,
    One0minutes = 0x04,
    Sevendot5minutes = 0x05,
    Fiveminutes = 0x06,
    Twodot5minutes = 0x07,
}

/**
 * @type enum16
 */
export enum IasZoneType {
    StandardCie = 0x0000,
    MotionSensor = 0x000d,
    ContactSwitch = 0x0015,
    DoorOrWindowHandle = 0x0016,
    FireSensor = 0x0028,
    WaterSensor = 0x002a,
    CarbonMonoxideSensor = 0x002b,
    PersonalEmergencyDevice = 0x002c,
    VibrationOrMovementSensor = 0x002d,
    RemoteControl = 0x010f,
    KeyFob = 0x0115,
    Keypad = 0x021d,
    StandardWarningDevice = 0x0225,
    GlassBreakSensor = 0x0226,
    SecurityRepeater = 0x0229,
    Invalid = 0xffff,
}

/**
 * @type map16
 */
export enum IasZoneStatusMask {
    Alarm1 = 0x0001,
    Alarm2 = 0x0002,
    Tamper = 0x0004,
    BatteryLow = 0x0008,
    SupervisionNotify = 0x0010,
    RestoreNotify = 0x0020,
    Trouble = 0x0040,
    AcmainsFault = 0x0080,
    Test = 0x0100,
    BatteryDefect = 0x0200,
}

export enum IasZoneStatusShiftRight {
    Alarm1 = 0x00,
    Alarm2 = 0x01,
    Tamper = 0x02,
    BatteryLow = 0x03,
    SupervisionNotify = 0x04,
    RestoreNotify = 0x05,
    Trouble = 0x06,
    AcmainsFault = 0x07,
    Test = 0x08,
    BatteryDefect = 0x09,
}

/**
 * @type unk
 */
export interface AnyType {
    type: number;
    value: unknown;
}

export interface ReadAttributeResponseRecord {
    attributeIdentifier: number;
    status: number;
    atttribute?: AnyType;
}

export interface WriteAttributeRecord {
    attributeIdentifier: number;
    attribute: AnyType;
}

export interface WriteAttributeResponseRecord {
    status: number;
    attributeIdentifier?: number;
}

/**
 * @type enum8
 */
export enum ReportingRole {
    Generator = 0x00,
    Recipient = 0x01,
}

export interface ConfigureReportingRecord {
    direction: number;
    attributeIdentifier: number;
    attributeType?: number;
    minimumReportingInterval?: number;
    maximumReportingInterval?: number;
    reportableChange?: unknown;
    timeout?: number;
}

export interface ConfigureReportingResponseRecord {
    status: number;
    direction?: number;
    attributeIdentifier?: number;
}

export interface ReadReportingConfigurationRecord {
    direction: number;
    attributeIdentifier: number;
}

export interface ReadReportingConfigurationResponseRecord {
    direction: number;
    attributeIdentifier: number;
    attributeType?: number;
    minimumReportingInterval?: number;
    maximumReportingInterval?: number;
    reportableChange?: unknown;
    timeout?: number;
}

export interface AttributeReportRecord {
    attributeIdentifier: number;
    attribute: AnyType;
}

export interface DiscoverAtttributesResponseRecord {
    attributeIdentifier: number;
    attributeType: number;
}

export interface ReadStructuredRecord {
    attributeIdentifier: number;
    index: number;
}

export interface WriteStructuredRecord {
    attributeIdentifier: number;
    selector: number;
    attribute: AnyType;
}

export interface WriteStructuredResponseRecord {
    status: number;
    attributeIdentifier?: number;
    selector?: number;
}

export interface DiscoverAtttributesExtendedResponseRecord {
    attributeIdentifier: number;
    accessControl: number;
}

/**
 * @cluster Basic
 * @type enum8
 */
export enum PowerSource {
    Unknown = 0x00,
    SinglePhaseMains = 0x01,
    ThreePhaseMains = 0x02,
    Battery = 0x03,
    Dcsource = 0x04,
    EmergencyMainsConstantlyPowered = 0x05,
    EmergencyMainsAndTransferSwitch = 0x06,
    UnknownWithBatteryBackup = 0x80,
    SinglePhaseMainsWithBatteryBackup = 0x81,
    ThreePhaseMainsWithBatteryBackup = 0x82,
    BatteryWithBatteryBackup = 0x83,
    DcsourceWithBatteryBackup = 0x84,
    EmergencyMainsConstantlyPoweredWithBatteryBackup = 0x85,
    EmergencyMainsAndTransferSwitchWithBatteryBackup = 0x86,
}

/**
 * @cluster Basic
 * @type enum8
 */
export enum GenericDeviceClass {
    Lighting = 0x00,
}

/**
 * @cluster Basic
 * @type enum8
 */
export enum GenericDeviceType {
    Incandescent = 0x00,
    SpotlightHalogen = 0x01,
    HalogenBulb = 0x02,
    Cfl = 0x03,
    LinearFluorescent = 0x04,
    Ledbulb = 0x05,
    SpotlightLed = 0x06,
    Ledstrip = 0x07,
    Ledtube = 0x08,
    GenericIndoorLuminaireOrLightFixture = 0x09,
    GenericOutdoorLuminaireOrLightFixture = 0x0a,
    PendantLuminaireOrLightFixture = 0x0b,
    FloorStandingLuminaireOrLightFixture = 0x0c,
    GenericController = 0xe0,
    WallSwitch = 0xe1,
    PortableRemoteController = 0xe2,
    MotionSensorOrLightSensor = 0xe3,
    GenericActuator = 0xf0,
    WallSocket = 0xf1,
    GatewayOrBridge = 0xf2,
    PlugInUnit = 0xf3,
    RetrofitActuator = 0xf4,
    Unspecified = 0xff,
}

/**
 * @cluster Basic
 * @type enum8
 */
export enum PhysicalEnvironment {
    UnspecifiedEnvironment = 0x00,
    Deprecated = 0x01,
    Bar = 0x02,
    Courtyard = 0x03,
    Bathroom = 0x04,
    Bedroom = 0x05,
    BilliardRoom = 0x06,
    UtilityRoom = 0x07,
    Cellar = 0x08,
    StorageCloset = 0x09,
    Theater = 0x0a,
    Office = 0x0b,
    Deck = 0x0c,
    Den = 0x0d,
    DiningRoom = 0x0e,
    ElectricalRoom = 0x0f,
    Elevator = 0x10,
    Entry = 0x11,
    FamilyRoom = 0x12,
    MainFloor = 0x13,
    Upstairs = 0x14,
    Downstairs = 0x15,
    BasementLowerLevel = 0x16,
    Gallery = 0x17,
    GameRoom = 0x18,
    Garage = 0x19,
    Gym = 0x1a,
    Hallway = 0x1b,
    House = 0x1c,
    Kitchen = 0x1d,
    LaundryRoom = 0x1e,
    Library = 0x1f,
    MasterBedroom = 0x20,
    MudRoom = 0x21,
    Nursery = 0x22,
    Pantry = 0x23,
    Office2 = 0x24,
    Outside = 0x25,
    Pool = 0x26,
    Porch = 0x27,
    SewingRoom = 0x28,
    SittingRoom = 0x29,
    Stairway = 0x2a,
    Yard = 0x2b,
    Attic = 0x2c,
    HotTub = 0x2d,
    LivingRoom = 0x2e,
    Sauna = 0x2f,
    ShopOrWorkshop = 0x30,
    GuestBedroom = 0x31,
    GuestBath = 0x32,
    PowderRoom = 0x33,
    BackYard = 0x34,
    FrontYard = 0x35,
    Patio = 0x36,
    Driveway = 0x37,
    SunRoom = 0x38,
    LivingRoom2 = 0x39,
    Spa = 0x3a,
    Whirlpool = 0x3b,
    Shed = 0x3c,
    EquipmentStorage = 0x3d,
    HobbyOrCraftRoom = 0x3e,
    Fountain = 0x3f,
    Pond = 0x40,
    ReceptionRoom = 0x41,
    BreakfastRoom = 0x42,
    Nook = 0x43,
    Garden = 0x44,
    Balcony = 0x45,
    PanicRoom = 0x46,
    Terrace = 0x47,
    Roof = 0x48,
    Toilet = 0x49,
    ToiletMain = 0x4a,
    OutsideToilet = 0x4b,
    ShowerRoom = 0x4c,
    Study = 0x4d,
    FrontGarden = 0x4e,
    BackGarden = 0x4f,
    Kettle = 0x50,
    Television = 0x51,
    Stove = 0x52,
    Microwave = 0x53,
    Toaster = 0x54,
    Vacuum = 0x55,
    Appliance = 0x56,
    FrontDoor = 0x57,
    BackDoor = 0x58,
    FridgeDoor = 0x59,
    MedicationCabinetDoor = 0x60,
    WardrobeDoor = 0x61,
    FrontCupboardDoor = 0x62,
    OtherDoor = 0x63,
    WaitingRoom = 0x64,
    TriageRoom = 0x65,
    DoctorsOffice = 0x66,
    PatientsPrivateRoom = 0x67,
    ConsultationRoom = 0x68,
    NurseStation = 0x69,
    Ward = 0x6a,
    Corridor = 0x6b,
    OperatingTheatre = 0x6c,
    DentalSurgeryRoom = 0x6d,
    MedicalImagingRoom = 0x6e,
    DecontaminationRoom = 0x6f,
    Atrium = 0x70,
    Mirror = 0x71,
    UnknownEnvironment = 0xff,
}

/**
 * @cluster Basic
 * @type map8
 */
export enum AlarmMask {
    GeneralHardwareFault = 0x01,
    GeneralSoftwareFault = 0x02,
}

/**
 * @cluster Basic
 */
export enum AlarmShiftRight {
    GeneralSoftwareFault = 0x01,
}

/**
 * @cluster Basic
 * @type map8
 */
export enum DisableLocalConfigMask {
    DisableResetToFactoryDefaults = 0x01,
    DisableDeviceConfiguration = 0x02,
}

/**
 * @cluster Basic
 */
export enum DisableLocalConfigShiftRight {
    DisableDeviceConfiguration = 0x01,
}

/**
 * @cluster PowerConfiguration
 * @type enum8
 */
export enum BatterySize {
    NoBattery = 0x00,
    BuiltIn = 0x01,
    Other = 0x02,
    Aa = 0x03,
    Aaa = 0x04,
    C = 0x05,
    D = 0x06,
    Cr2 = 0x07,
    Cr123a = 0x08,
    Unknown = 0xff,
}

/**
 * @cluster PowerConfiguration
 * @type map8
 */
export enum BatteryAlarmMask {
    BatteryVoltageTooLow = 0x01,
    BatteryAlarm1 = 0x02,
    BatteryAlarm2 = 0x04,
    BatteryAlarm3 = 0x08,
}

/**
 * @cluster PowerConfiguration
 */
export enum BatteryAlarmShiftRight {
    BatteryAlarm1 = 0x01,
    BatteryAlarm2 = 0x02,
    BatteryAlarm3 = 0x03,
}

/**
 * @cluster PowerConfiguration
 * @type map32
 */
export enum BatteryAlarmStateMask {
    Battery1minThreshold = 0x01,
    Battery1threshold1 = 0x02,
    Battery1threshold2 = 0x04,
    Battery1threshold3 = 0x08,
    Battery2minThreshold = 0x400,
    Battery2threshold1 = 0x800,
    Battery2threshold2 = 0x1000,
    Battery2threshold3 = 0x2000,
    Battery3minThreshold = 0x100000,
    Battery3threshold1 = 0x200000,
    Battery3threshold2 = 0x400000,
    Battery3threshold3 = 0x800000,
    MainsPowerSupplyLost = 0x40000000,
}

/**
 * @cluster PowerConfiguration
 */
export enum BatteryAlarmStateShiftRight {
    Battery1threshold1 = 0x01,
    Battery1threshold2 = 0x02,
    Battery1threshold3 = 0x03,
    Battery2minThreshold = 0x10,
    Battery2threshold1 = 0x11,
    Battery2threshold2 = 0x12,
    Battery2threshold3 = 0x13,
    Battery3minThreshold = 0x20,
    Battery3threshold1 = 0x21,
    Battery3threshold2 = 0x22,
    Battery3threshold3 = 0x23,
    MainsPowerSupplyLost = 0x30,
}

/**
 * @cluster PowerConfiguration
 * @type map8
 */
export enum MainsAlarmMask {
    MainsVoltageTooLow = 0x01,
    MainsVoltageTooHigh = 0x02,
    MainsPowerSupplyLost = 0x04,
}

/**
 * @cluster PowerConfiguration
 */
export enum MainsAlarmShiftRight {
    MainsVoltageTooHigh = 0x01,
    MainsPowerSupplyLost = 0x02,
}

/**
 * @cluster DeviceTemperatureConfiguration
 * @type map8
 */
export enum DeviceTempAlarmMask {
    DeviceTemperatureTooLow = 0x01,
    DeviceTemperatureTooHigh = 0x02,
}

/**
 * @cluster DeviceTemperatureConfiguration
 */
export enum DeviceTempAlarmShiftRight {
    DeviceTemperatureTooHigh = 0x01,
}

/**
 * @cluster Identify
 * @type uint8
 */
export enum EffectIdentifier {
    Blink = 0x00,
    Breathe = 0x01,
    Okay = 0x02,
    ChannelChange = 0x0b,
    FinishEffect = 0xfe,
    StopEffect = 0xff,
}

/**
 * @cluster Identify
 * @type uint8
 */
export enum EffectVariant {
    Default = 0x00,
}

/**
 * @cluster Groups
 * @type map8
 */
export enum NameSupportMask {
    Supported = 0x80,
}

/**
 * @cluster Groups
 */
export enum NameSupportShiftRight {
    Supported = 0x07,
}

/**
 * @cluster Scenes
 */
export interface SExtensionFieldSetList {
    clusterId: number;
    extensionFieldSet: string;
}

/**
 * @cluster Scenes
 * @type uint8
 */
export enum ModeMask {
    CopyAllScenes = 0x01,
}

/**
 * @cluster OnOff
 * @type enum8
 */
export enum StartUpOnOff {
    SetOnOffTo0 = 0x00,
    SetOnOffTo1 = 0x01,
    TogglePreviousOnOff = 0x02,
    SetPreviousOnOff = 0xff,
}

/**
 * @cluster OnOff
 * @type uint8
 */
export enum OnOffControlMask {
    AcceptOnlyWhenOn = 0x01,
}

/**
 * @cluster Level
 * @type map8
 */
export enum LevelOptionsMask {
    ExecuteIfOff = 0x01,
    CoupleColorTempToLevel = 0x02,
}

/**
 * @cluster Level
 */
export enum LevelOptionsShiftRight {
    CoupleColorTempToLevel = 0x01,
}

/**
 * @cluster Level
 * @type enum8
 */
export enum MoveStepMode {
    Up = 0x00,
    Down = 0x01,
}

/**
 * @cluster Time
 * @type map8
 */
export enum TimeStatusMask {
    Master = 0x01,
    Synchronized = 0x02,
    MasterZoneDst = 0x04,
    Superseding = 0x08,
}

/**
 * @cluster Time
 */
export enum TimeStatusShiftRight {
    Synchronized = 0x01,
    MasterZoneDst = 0x02,
    Superseding = 0x03,
}

/**
 * @cluster IlluminanceMeasurement
 * @type enum8
 */
export enum LightSensorType {
    Photodiode = 0x00,
    Cmos = 0x01,
    Unknown = 0xff,
}

/**
 * @cluster IlluminanceLevelSensing
 * @type enum8
 */
export enum LevelStatus {
    IlluminanceOnTarget = 0x00,
    IlluminanceBelowTarget = 0x01,
    IlluminanceAboveTarget = 0x02,
}

/**
 * @cluster OccupancySensing
 * @type map8
 */
export enum OccupancyMask {
    SensedOccupancy = 0x01,
}

/**
 * @cluster OccupancySensing
 * @type enum8
 */
export enum OccupancySensorType {
    Pir = 0x00,
    Ultrasonic = 0x01,
    PirandUltrasonic = 0x02,
    PhysicalContact = 0x03,
}

/**
 * @cluster OccupancySensing
 * @type map8
 */
export enum OccupancySensorTypeBitmapMask {
    Pir = 0x01,
    Ultrasonic = 0x02,
    PhysicalContact = 0x04,
}

/**
 * @cluster OccupancySensing
 */
export enum OccupancySensorTypeBitmapShiftRight {
    Ultrasonic = 0x01,
    PhysicalContact = 0x02,
}

/**
 * @cluster ElectricalMeasurement
 * @type map32
 */
export enum MeasurementTypeMask {
    ActiveMeasurementAc = 0x01,
    ReactiveMeasurementAc = 0x02,
    ApparentMeasurementAc = 0x04,
    PhaseAmeasurement = 0x08,
    PhaseBmeasurement = 0x10,
    PhaseCmeasurement = 0x20,
    Dcmeasurement = 0x40,
    HarmonicsMeasurement = 0x80,
    PowerQualityMeasurement = 0x100,
}

/**
 * @cluster ElectricalMeasurement
 */
export enum MeasurementTypeShiftRight {
    ReactiveMeasurementAc = 0x01,
    ApparentMeasurementAc = 0x02,
    PhaseAmeasurement = 0x03,
    PhaseBmeasurement = 0x04,
    PhaseCmeasurement = 0x05,
    Dcmeasurement = 0x06,
    HarmonicsMeasurement = 0x07,
    PowerQualityMeasurement = 0x08,
}

/**
 * @cluster ElectricalMeasurement
 * @type map8
 */
export enum DCOverloadAlarmsMask {
    VoltageOverload = 0x01,
    CurrentOverload = 0x02,
}

/**
 * @cluster ElectricalMeasurement
 */
export enum DCOverloadAlarmsShiftRight {
    CurrentOverload = 0x01,
}

/**
 * @cluster ElectricalMeasurement
 * @type map16
 */
export enum ACAlarmsMask {
    VoltageOverload = 0x0001,
    CurrentOverload = 0x0002,
    ActivePowerOverload = 0x0004,
    ReactivePowerOverload = 0x0008,
    AverageRmsoverVoltage = 0x0010,
    AverageRmsunderVoltage = 0x0020,
    RmsextremeOverVoltage = 0x0040,
    RmsextremeUnderVoltage = 0x0080,
    RmsvoltageSag = 0x0100,
    RmsvoltageSwell = 0x0200,
}

/**
 * @cluster ElectricalMeasurement
 */
export enum ACAlarmsShiftRight {
    CurrentOverload = 0x01,
    ActivePowerOverload = 0x02,
    ReactivePowerOverload = 0x03,
    AverageRmsoverVoltage = 0x04,
    AverageRmsunderVoltage = 0x05,
    RmsextremeOverVoltage = 0x06,
    RmsextremeUnderVoltage = 0x07,
    RmsvoltageSag = 0x08,
    RmsvoltageSwell = 0x09,
}

/**
 * @cluster ElectricalMeasurement
 * @type enum8
 */
export enum Status {
    Success = 0x00,
    AttributeProfileNotSupported = 0x01,
    InvalidStartTime = 0x02,
    MoreIntervalsRequestedThanCanBeReturned = 0x03,
    NoIntervalsAvailableForTheRequestedTime = 0x04,
}

/**
 * @cluster ColorControl
 * @type map8
 */
export enum CCColorOptionsMask {
    ExecuteIfOff = 0x01,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum ColorControlDirection {
    ShortestDistance = 0x00,
    LongestDistance = 0x01,
    Up = 0x02,
    Down = 0x03,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum ColorControlMoveMode {
    Stop = 0x00,
    Up = 0x01,
    Down = 0x03,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum ColorControlStepMode {
    Up = 0x01,
    Down = 0x03,
}

/**
 * @cluster ColorControl
 * @type uint8
 */
export enum ColorControlColorLoopDirection {
    DecrementEnhancedCurrentHue = 0x00,
    IncrementEnhancedCurrentHue = 0x01,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum DriftCompensation {
    None = 0x00,
    OtherOrUnknown = 0x01,
    TemperatureMonitoring = 0x02,
    OpticalLuminanceMonitoringAndFeedback = 0x03,
    OpticalColorMonitoringAndFeedback = 0x04,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum ColorMode {
    CurrentHueAndCurrentSaturation = 0x00,
    CurrentXandCurrentY = 0x01,
    ColorTemperatureMireds = 0x02,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum EnhancedColorMode {
    CurrentHueAndCurrentSaturation = 0x00,
    CurrentXandCurrentY = 0x01,
    ColorTemperatureMireds = 0x02,
    EnhancedCurrentHueAndCurrentSaturation = 0x03,
}

/**
 * @cluster ColorControl
 * @type uint8
 */
export enum ColorLoopActive {
    ColorLoopInactive = 0x00,
    ColorLoopActive = 0x01,
}

/**
 * @cluster ColorControl
 * @type map16
 */
export enum ColorCapabilitiesMask {
    HueSaturationSupported = 0x0001,
    EnhancedHueSupported = 0x0002,
    ColorLoopSupported = 0x0004,
    Xysupported = 0x0008,
    ColorTemperatureSupported = 0x0010,
}

/**
 * @cluster ColorControl
 */
export enum ColorCapabilitiesShiftRight {
    EnhancedHueSupported = 0x01,
    ColorLoopSupported = 0x02,
    Xysupported = 0x03,
    ColorTemperatureSupported = 0x04,
}

/**
 * @cluster ColorControl
 * @type map8
 */
export enum UpdateFlagsMask {
    UpdateAction = 0x01,
    UpdateDirection = 0x02,
    UpdateTime = 0x04,
    UpdateStartHue = 0x08,
}

/**
 * @cluster ColorControl
 */
export enum UpdateFlagsShiftRight {
    UpdateDirection = 0x01,
    UpdateTime = 0x02,
    UpdateStartHue = 0x03,
}

/**
 * @cluster ColorControl
 * @type enum8
 */
export enum Action {
    DeactivateColorLoop = 0x00,
    ActivateColorLoopFromColorLoopStartEnhancedHue = 0x01,
    ActivateColorLoopFromEnhancedCurrentHue = 0x02,
}

/**
 * @cluster BallastConfiguration
 * @type map8
 */
export enum BallastStatusMask {
    BallastNonOperational = 0x01,
    LampFailure = 0x02,
}

/**
 * @cluster BallastConfiguration
 */
export enum BallastStatusShiftRight {
    LampFailure = 0x01,
}

/**
 * @cluster BallastConfiguration
 * @type map8
 */
export enum LampAlarmModeMask {
    LampBurnHours = 0x01,
}

/**
 * @cluster PumpConfigurationAndControl
 * @type enum8
 */
export enum PumpOperationMode {
    Normal = 0x00,
    Minimum = 0x01,
    Maximum = 0x02,
    Local = 0x03,
}

/**
 * @cluster PumpConfigurationAndControl
 * @type enum8
 */
export enum PumpControlMode {
    ConstantSpeed = 0x00,
    ConstantPressure = 0x01,
    ProportionalPressure = 0x02,
    ConstantFlow = 0x03,
    ConstantTemperature = 0x05,
    Automatic = 0x07,
}

/**
 * @cluster PumpConfigurationAndControl
 * @type map16
 */
export enum PumpStatusMask {
    DeviceFault = 0x0001,
    SupplyFault = 0x0002,
    SpeedLow = 0x0004,
    SpeedHigh = 0x0008,
    LocalOverride = 0x0010,
    Running = 0x0020,
    RemotePressure = 0x0040,
    RemoteFlow = 0x0080,
    RemoteTemperature = 0x0100,
}

/**
 * @cluster PumpConfigurationAndControl
 */
export enum PumpStatusShiftRight {
    SupplyFault = 0x01,
    SpeedLow = 0x02,
    SpeedHigh = 0x03,
    LocalOverride = 0x04,
    Running = 0x05,
    RemotePressure = 0x06,
    RemoteFlow = 0x07,
    RemoteTemperature = 0x08,
}

/**
 * @cluster Thermostat
 */
export interface TransitionType {
    transitionTime: number;
    heatSetPoint?: number;
    coolSetPoint?: number;
}

/**
 * @cluster Thermostat
 * @type map8
 */
export enum TstatScheduleDOWMask {
    Sunday = 0x01,
    Monday = 0x02,
    Tuesday = 0x04,
    Wednesday = 0x08,
    Thursday = 0x10,
    Friday = 0x20,
    Saturday = 0x40,
    AwayOrVacation = 0x80,
}

/**
 * @cluster Thermostat
 */
export enum TstatScheduleDOWShiftRight {
    Monday = 0x01,
    Tuesday = 0x02,
    Wednesday = 0x03,
    Thursday = 0x04,
    Friday = 0x05,
    Saturday = 0x06,
    AwayOrVacation = 0x07,
}

/**
 * @cluster Thermostat
 * @type map8
 */
export enum TstatScheduleModeMask {
    Heat = 0x01,
    Cool = 0x02,
}

/**
 * @cluster Thermostat
 */
export enum TstatScheduleModeShiftRight {
    Cool = 0x01,
}

/**
 * @cluster Thermostat
 * @type map8
 */
export enum HVACSystemTypeConfigurationMask {
    CoolingSystemStage = 0x03,
    HeatingSystemStage = 0x0c,
    HeatingSystemType = 0x10,
    HeatingFuelSource = 0x20,
}

/**
 * @cluster Thermostat
 */
export enum HVACSystemTypeConfigurationShiftRight {
    HeatingSystemStage = 0x02,
    HeatingSystemType = 0x04,
    HeatingFuelSource = 0x05,
}

/**
 * @cluster Thermostat
 * @type map8
 */
export enum RemoteSensingMask {
    LocalTemperatureRemote = 0x01,
    OutdoorTemperatureRemote = 0x02,
    OccupancyRemote = 0x04,
}

/**
 * @cluster Thermostat
 */
export enum RemoteSensingShiftRight {
    OutdoorTemperatureRemote = 0x01,
    OccupancyRemote = 0x02,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ControlSequenceOfOperation {
    CoolingOnly = 0x00,
    CoolingWithReheat = 0x01,
    HeatingOnly = 0x02,
    HeatingWithReheat = 0x03,
    CoolingAndHeating4pipes = 0x04,
    CoolingAndHeating4pipesWithReheat = 0x05,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum SystemMode {
    Off = 0x00,
    Auto = 0x01,
    Cool = 0x03,
    Heat = 0x04,
    EmergencyHeating = 0x05,
    Precooling = 0x06,
    FanOnly = 0x07,
    Dry = 0x08,
    Sleep = 0x09,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ThermostatRunningMode {
    Off = 0x00,
    Cool = 0x03,
    Heat = 0x04,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum StartOfWeek {
    Sunday = 0x00,
    Monday = 0x01,
    Tuesday = 0x02,
    Wednesday = 0x03,
    Thursday = 0x04,
    Friday = 0x05,
    Sunday2 = 0x06,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum TemperatureSetpointHold {
    SetpointHoldOff = 0x00,
    SetpointHoldOn = 0x01,
}

/**
 * @cluster Thermostat
 * @type map8
 */
export enum ThermostatProgrammingOperationModeMask {
    ProgrammingMode = 0x01,
    AutoOrRecovery = 0x02,
    EconomyOrEnergyStar = 0x04,
}

/**
 * @cluster Thermostat
 */
export enum ThermostatProgrammingOperationModeShiftRight {
    AutoOrRecovery = 0x01,
    EconomyOrEnergyStar = 0x02,
}

/**
 * @cluster Thermostat
 * @type map16
 */
export enum ThermostatRunningStateMask {
    HeatOn = 0x0001,
    CoolOn = 0x0002,
    FanOn = 0x0004,
    HeatSecondStageOn = 0x0008,
    CoolSecondStageOn = 0x0010,
    FanSecondStageOn = 0x0020,
    FanThirdStageOn = 0x0040,
}

/**
 * @cluster Thermostat
 */
export enum ThermostatRunningStateShiftRight {
    CoolOn = 0x01,
    FanOn = 0x02,
    HeatSecondStageOn = 0x03,
    CoolSecondStageOn = 0x04,
    FanSecondStageOn = 0x05,
    FanThirdStageOn = 0x06,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum SetpointChangeSource {
    Manual = 0x00,
    ScheduleOrInternalProgramming = 0x01,
    External = 0x02,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ACType {
    CoolingAndFixedSpeed = 0x01,
    HeatPumpAndFixedSpeed = 0x02,
    CoolingAndInverter = 0x03,
    HeatPumpAndInverter = 0x04,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ACRefrigerantType {
    R22 = 0x01,
    R410a = 0x02,
    R407c = 0x03,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ACCompressorType {
    T1 = 0x01,
    T2 = 0x02,
    T3 = 0x03,
}

/**
 * @cluster Thermostat
 * @type map32
 */
export enum ACErrorCodeMask {
    CompressorFailureOrRefrigerantLeakage = 0x01,
    RoomTemperatureSensorFailure = 0x02,
    OutdoorTemperatureSensorFailure = 0x04,
    IndoorCoilTemperatureSensorFailure = 0x08,
    FanFailure = 0x10,
}

/**
 * @cluster Thermostat
 */
export enum ACErrorCodeShiftRight {
    RoomTemperatureSensorFailure = 0x01,
    OutdoorTemperatureSensorFailure = 0x02,
    IndoorCoilTemperatureSensorFailure = 0x03,
    FanFailure = 0x04,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ACLouverPosition {
    FullyClosed = 0x01,
    FullyOpen = 0x02,
    QuarterOpen = 0x03,
    HalfOpen = 0x04,
    ThreeQuartersOpen = 0x05,
}

/**
 * @cluster Thermostat
 * @type enum8
 */
export enum ACCapacityFormat {
    Btuh = 0x00,
}

/**
 * @cluster FanControl
 * @type enum8
 */
export enum FanMode {
    Off = 0x00,
    Low = 0x01,
    Medium = 0x02,
    High = 0x03,
    On = 0x04,
    Auto = 0x05,
    Smart = 0x06,
}

/**
 * @cluster FanControl
 * @type enum8
 */
export enum FanModeSequence {
    LowMedHigh = 0x00,
    LowHigh = 0x01,
    LowMedHighAuto = 0x02,
    LowHighAuto = 0x03,
    OnAuto = 0x04,
}

/**
 * @cluster DehumidificationControl
 * @type enum8
 */
export enum RelativeHumidityMode {
    MeasuredLocally = 0x00,
    UpdatedOverTheNetwork = 0x01,
}

/**
 * @cluster DehumidificationControl
 * @type enum8
 */
export enum DehumidificationLockout {
    DehumidificationNotAllowed = 0x00,
    DehumidificationAllowed = 0x01,
}

/**
 * @cluster DehumidificationControl
 * @type enum8
 */
export enum RelativeHumidityDisplay {
    NotDisplayed = 0x00,
    Displayed = 0x01,
}

/**
 * @cluster ThermostatUserInterfaceConfiguration
 * @type enum8
 */
export enum TemperatureDisplayMode {
    Celsius = 0x00,
    Fahrenheit = 0x01,
}

/**
 * @cluster ThermostatUserInterfaceConfiguration
 * @type enum8
 */
export enum KeypadLockout {
    None = 0x00,
    Level1 = 0x01,
    Level2 = 0x02,
    Level3 = 0x03,
    Level4 = 0x04,
    Level5 = 0x05,
}

/**
 * @cluster ThermostatUserInterfaceConfiguration
 * @type enum8
 */
export enum ScheduleProgrammingVisibility {
    LocalEnabled = 0x00,
    LocalDisabled = 0x01,
}

/**
 * @cluster ShadeConfiguration
 * @type enum8
 */
export enum SHDCFGDirection {
    Closing = 0x00,
    Opening = 0x01,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum DrlkUserStatus {
    Available = 0x00,
    OccupiedEnabled = 0x01,
    OccupiedDisabled = 0x03,
    NotSupported = 0xff,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum DrlkSettableUserStatus {
    OccupiedEnabled = 0x01,
    OccupiedDisabled = 0x03,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum DrlkUserType {
    UnrestrictedUser = 0x00,
    YearDayScheduleUser = 0x01,
    WeekDayScheduleUser = 0x02,
    MasterUser = 0x03,
    NonAccessUser = 0x04,
    NotSupported = 0xff,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum DrlkOperMode {
    Normal = 0x00,
    Vacation = 0x01,
    Privacy = 0x02,
    NoRflockOrUnlock = 0x03,
    Passage = 0x04,
}

/**
 * @cluster DoorLock
 * @type map8
 */
export enum DrlkDaysMask {
    Sun = 0x01,
    Mon = 0x02,
    Tue = 0x04,
    Wed = 0x08,
    Thu = 0x10,
    Fri = 0x20,
    Sat = 0x40,
    Enable = 0x80,
}

/**
 * @cluster DoorLock
 */
export enum DrlkDaysShiftRight {
    Mon = 0x01,
    Tue = 0x02,
    Wed = 0x03,
    Thu = 0x04,
    Fri = 0x05,
    Sat = 0x06,
    Enable = 0x07,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum DrlkPassFailStatus {
    Pass = 0x00,
    Fail = 0x01,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum DrlkSetCodeStatus {
    Success = 0x00,
    GeneralFailure = 0x01,
    MemoryFull = 0x02,
    DuplicateCode = 0x03,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum DrlkOperEventSource {
    Keypad = 0x00,
    Rf = 0x01,
    Manual = 0x02,
    Rfid = 0x03,
    Indeterminate = 0xff,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum LockState {
    NotFullyLocked = 0x00,
    Locked = 0x01,
    Unlocked = 0x02,
    Undefined = 0xff,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum LockType {
    DeadBolt = 0x00,
    Magnetic = 0x01,
    Other = 0x02,
    Mortise = 0x03,
    Rim = 0x04,
    LatchBolt = 0x05,
    CylindricalLock = 0x06,
    TubularLock = 0x07,
    InterconnectedLock = 0x08,
    DeadLatch = 0x09,
    DoorFurniture = 0x0a,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum DoorState {
    Open = 0x00,
    Closed = 0x01,
    ErrorJammed = 0x02,
    ErrorForcedOpen = 0x03,
    ErrorUnspecified = 0x04,
    Undefined = 0xff,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum LEDSettings {
    NeverUseLed = 0x00,
    UseLedexceptForAccessAllowed = 0x01,
    UseLedforAllEvents = 0x02,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum SoundVolume {
    SilentMode = 0x00,
    LowVolume = 0x01,
    HighVolume = 0x02,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum SupportedOperatingModesMask {
    NormalModeSupported = 0x0001,
    VacationModeSupported = 0x0002,
    PrivacyModeSupported = 0x0004,
    NoRflockOrUnlockModeSupported = 0x0008,
    PassageModeSupported = 0x0010,
}

/**
 * @cluster DoorLock
 */
export enum SupportedOperatingModesShiftRight {
    VacationModeSupported = 0x01,
    PrivacyModeSupported = 0x02,
    NoRflockOrUnlockModeSupported = 0x03,
    PassageModeSupported = 0x04,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum DefaultConfigurationRegisterMask {
    DefaultEnableLocalProgrammingAttributeIsEnabled = 0x0001,
    DefaultKeypadInterfaceIsEnabled = 0x0002,
    DefaultRfinterfaceIsEnabled = 0x0004,
    DefaultSoundVolumeIsEnabled = 0x0020,
    DefaultAutoRelockTimeIsEnabled = 0x0040,
    DefaultLedsettingsIsEnabled = 0x0080,
}

/**
 * @cluster DoorLock
 */
export enum DefaultConfigurationRegisterShiftRight {
    DefaultKeypadInterfaceIsEnabled = 0x01,
    DefaultRfinterfaceIsEnabled = 0x02,
    DefaultSoundVolumeIsEnabled = 0x05,
    DefaultAutoRelockTimeIsEnabled = 0x06,
    DefaultLedsettingsIsEnabled = 0x07,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum SecurityLevel {
    Network = 0x00,
    Aps = 0x01,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum KeypadOperationEventMask {
    KeypadOpUnknownOrMs = 0x0001,
    KeypadOpLock = 0x0002,
    KeypadOpUnlock = 0x0004,
    KeypadOpLockErrorInvalidPin = 0x0008,
    KeypadOpLockErrorInvalidSchedule = 0x0010,
    KeypadOpUnlockInvalidPin = 0x0020,
    KeypadOpUnlockInvalidSchedule = 0x0040,
    KeypadOpNonAccessUser = 0x0080,
}

/**
 * @cluster DoorLock
 */
export enum KeypadOperationEventShiftRight {
    KeypadOpLock = 0x01,
    KeypadOpUnlock = 0x02,
    KeypadOpLockErrorInvalidPin = 0x03,
    KeypadOpLockErrorInvalidSchedule = 0x04,
    KeypadOpUnlockInvalidPin = 0x05,
    KeypadOpUnlockInvalidSchedule = 0x06,
    KeypadOpNonAccessUser = 0x07,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum RFOperationEventMask {
    RfopUnknownOrMs = 0x0001,
    RfopLock = 0x0002,
    RfopUnlock = 0x0004,
    RfopLockErrorInvalidCode = 0x0008,
    RfopLockErrorInvalidSchedule = 0x0010,
    RfopUnlockInvalidCode = 0x0020,
    RfopUnlockInvalidSchedule = 0x0040,
}

/**
 * @cluster DoorLock
 */
export enum RFOperationEventShiftRight {
    RfopLock = 0x01,
    RfopUnlock = 0x02,
    RfopLockErrorInvalidCode = 0x03,
    RfopLockErrorInvalidSchedule = 0x04,
    RfopUnlockInvalidCode = 0x05,
    RfopUnlockInvalidSchedule = 0x06,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum ManualOperationEventMask {
    ManualOpUnknownOrMs = 0x0001,
    ManualOpThumbturnLock = 0x0002,
    ManualOpThumbturnUnlock = 0x0004,
    ManualOpOneTouchLock = 0x0008,
    ManualOpKeyLock = 0x0010,
    ManualOpKeyUnlock = 0x0020,
    ManualOpAutoLock = 0x0040,
    ManualOpScheduleLock = 0x0080,
    ManualOpScheduleUnlock = 0x0100,
    ManualOpLock = 0x0200,
    ManualOpUnlock = 0x0400,
}

/**
 * @cluster DoorLock
 */
export enum ManualOperationEventShiftRight {
    ManualOpThumbturnLock = 0x01,
    ManualOpThumbturnUnlock = 0x02,
    ManualOpOneTouchLock = 0x03,
    ManualOpKeyLock = 0x04,
    ManualOpKeyUnlock = 0x05,
    ManualOpAutoLock = 0x06,
    ManualOpScheduleLock = 0x07,
    ManualOpScheduleUnlock = 0x08,
    ManualOpLock = 0x09,
    ManualOpUnlock = 0x10,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum RFIDOperationEventMask {
    RfidopUnknownOrMs = 0x0001,
    RfidopLock = 0x0002,
    RfidopUnlock = 0x0004,
    RfidopLockErrorInvalidRfid = 0x0008,
    RfidopLockErrorInvalidSchedule = 0x0010,
    RfidopUnlockErrorInvalidRfid = 0x0020,
    RfidopUnlockErrorInvalidSchedule = 0x0040,
}

/**
 * @cluster DoorLock
 */
export enum RFIDOperationEventShiftRight {
    RfidopLock = 0x01,
    RfidopUnlock = 0x02,
    RfidopLockErrorInvalidRfid = 0x03,
    RfidopLockErrorInvalidSchedule = 0x04,
    RfidopUnlockErrorInvalidRfid = 0x05,
    RfidopUnlockErrorInvalidSchedule = 0x06,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum KeypadProgrammingEventMask {
    KeypadProgUnknownOrMs = 0x0001,
    KeypadProgMasterCodeChanged = 0x0002,
    KeypadProgPinadded = 0x0004,
    KeypadProgPindeleted = 0x0008,
    KeypadProgPinchanged = 0x0010,
}

/**
 * @cluster DoorLock
 */
export enum KeypadProgrammingEventShiftRight {
    KeypadProgMasterCodeChanged = 0x01,
    KeypadProgPinadded = 0x02,
    KeypadProgPindeleted = 0x03,
    KeypadProgPinchanged = 0x04,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum RFProgrammingEventMask {
    RfprogUnknownOrMs = 0x0001,
    RfprogPinadded = 0x0004,
    RfprogPindeleted = 0x0008,
    RfprogPinchanged = 0x0010,
    RfprogRfidadded = 0x0020,
    RfprogRfiddeleted = 0x0040,
}

/**
 * @cluster DoorLock
 */
export enum RFProgrammingEventShiftRight {
    RfprogPinadded = 0x02,
    RfprogPindeleted = 0x03,
    RfprogPinchanged = 0x04,
    RfprogRfidadded = 0x05,
    RfprogRfiddeleted = 0x06,
}

/**
 * @cluster DoorLock
 * @type map16
 */
export enum RFIDProgrammingEventMask {
    RfidprogUnknownOrMs = 0x0001,
    RfidprogRfidadded = 0x0020,
    RfidprogRfiddeleted = 0x0040,
}

/**
 * @cluster DoorLock
 */
export enum RFIDProgrammingEventShiftRight {
    RfidprogRfidadded = 0x05,
    RfidprogRfiddeleted = 0x06,
}

/**
 * @cluster DoorLock
 * @type enum8
 */
export enum EventType {
    Operation = 0x00,
    Programming = 0x01,
    Alarm = 0x02,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum OperationEventCode {
    UnknownOrMs = 0x00,
    Lock = 0x01,
    Unlock = 0x02,
    LockFailureInvalidPinorId = 0x03,
    LockFailureInvalidSchedule = 0x04,
    UnlockFailureInvalidPinorId = 0x05,
    UnlockFailureInvalidSchedule = 0x06,
    OneTouchLock = 0x07,
    KeyLock = 0x08,
    KeyUnlock = 0x09,
    AutoLock = 0x0a,
    ScheduleLock = 0x0b,
    ScheduleUnlock = 0x0c,
    ManualLock = 0x0d,
    ManualUnlock = 0x0e,
    NonAccessUserOperationalEvent = 0x0e,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum ProgramEventSource {
    Keypad = 0x00,
    Rf = 0x01,
    Rfid = 0x03,
    Indeterminate = 0xff,
}

/**
 * @cluster DoorLock
 * @type uint8
 */
export enum ProgramEventCode {
    UnknownOrMs = 0x00,
    MasterCodeChanged = 0x01,
    PincodeAdded = 0x02,
    PincodeDeleted = 0x03,
    PincodeChanged = 0x04,
    RfidcodeAdded = 0x05,
    RfidcodeDeleted = 0x06,
}

/**
 * @cluster WindowCovering
 * @type enum8
 */
export enum WindowCoveringType {
    Rollershade = 0x00,
    Rollershade2motor = 0x01,
    RollershadeExterior = 0x02,
    RollershadeExterior2motor = 0x03,
    Drapery = 0x04,
    Awning = 0x05,
    Shutter = 0x06,
    TiltBlindTiltOnly = 0x07,
    TiltBlindLiftAndTilt = 0x08,
    ProjectorScreen = 0x09,
}

/**
 * @cluster WindowCovering
 * @type map8
 */
export enum ConfigOrStatusMask {
    Operational = 0x01,
    Online = 0x02,
    OpenAndUpCommandsReversed = 0x04,
    LiftClosedLoop = 0x08,
    TiltClosedLoop = 0x10,
    LiftEncoderControlled = 0x20,
    TiltEncoderControlled = 0x40,
}

/**
 * @cluster WindowCovering
 */
export enum ConfigOrStatusShiftRight {
    Online = 0x01,
    OpenAndUpCommandsReversed = 0x02,
    LiftClosedLoop = 0x03,
    TiltClosedLoop = 0x04,
    LiftEncoderControlled = 0x05,
    TiltEncoderControlled = 0x06,
}

/**
 * @cluster BarrierControl
 * @type enum8
 */
export enum MovingState {
    Stopped = 0x00,
    Closing = 0x01,
    Opening = 0x02,
}

/**
 * @cluster BarrierControl
 * @type map16
 */
export enum SafetyStatusMask {
    RemoteLockout = 0x0001,
    TamperDetected = 0x0002,
    FailedCommunication = 0x0004,
    PositionFailure = 0x0008,
}

/**
 * @cluster BarrierControl
 */
export enum SafetyStatusShiftRight {
    TamperDetected = 0x01,
    FailedCommunication = 0x02,
    PositionFailure = 0x03,
}

/**
 * @cluster BarrierControl
 * @type map8
 */
export enum CapabilitiesMask {
    PartialBarrier = 0x01,
}

/**
 * @cluster IASZone
 * @type enum8
 */
export enum ZoneState {
    NotEnrolled = 0x00,
    Enrolled = 0x01,
}

/**
 * @cluster IASZone
 * @type enum8
 */
export enum EnrollResponseCode {
    Success = 0x00,
    NotSupported = 0x01,
    NoEnrollPermit = 0x02,
    TooManyZones = 0x03,
}

/**
 * @cluster IASACE
 * @type enum8
 */
export enum IasaceAudibleNotification {
    Mute = 0x00,
    DefaultSound = 0x01,
}

/**
 * @cluster IASACE
 * @type enum8
 */
export enum IasaceAlarmStatus {
    NoAlarm = 0x00,
    Burgler = 0x01,
    Fire = 0x02,
    Emergency = 0x03,
    PolicePanic = 0x04,
    FirePanic = 0x05,
    EmergencyPanic = 0x06,
}

/**
 * @cluster IASACE
 * @type enum8
 */
export enum IasacPanelStatus {
    PanelDisarmedReadyToArm = 0x00,
    ArmedStay = 0x01,
    ArmedNight = 0x02,
    ArmedAway = 0x03,
    ExitDelay = 0x04,
    EntryDelay = 0x05,
    NotReadyToArm = 0x06,
    InAlarm = 0x07,
    ArmingStay = 0x08,
    ArmingNight = 0x09,
    ArmingAway = 0x0a,
}

/**
 * @cluster IASACE
 */
export interface IasaceZoneStatusRecord {
    zoneID: number;
    zoneStatus: number;
}

/**
 * @cluster IASACE
 * @type enum8
 */
export enum ArmMode {
    Disarm = 0x00,
    ArmDayHomeZonesOnly = 0x01,
    ArmNightSleepZonesOnly = 0x02,
    ArmAllZones = 0x03,
}

/**
 * @cluster IASACE
 * @type enum8
 */
export enum ArmNotification {
    AllZonesDisarmed = 0x00,
    OnlyDayHomeZonesArmed = 0x01,
    OnlyNightSleepZonesArmed = 0x02,
    AllZonesArmed = 0x03,
    InvalidArmDisarmCode = 0x04,
    NotReadyToArm = 0x05,
    AlreadyDisarmed = 0x06,
}

/**
 * @cluster IASACE
 * @type uint8
 */
export enum ZoneIDBypassResult {
    ZoneBypassed = 0x00,
    ZoneNotBypassed = 0x01,
    NotAllowed = 0x02,
    InvalidZoneId = 0x03,
    UnknownZoneId = 0x04,
    InvalidArmDisarmCode = 0x05,
}

/**
 * @cluster IASWD
 * @type enum8
 */
export enum IaswdLevel {
    LowLevel = 0x00,
    MediumLevel = 0x01,
    HighLevel = 0x02,
    VeryHighLevel = 0x03,
}

/**
 * @cluster IASWD
 * @type map8
 */
export enum SirenConfigurationMask {
    SirenLevel = 0x03,
    Strobe = 0x0c,
    WarningMode = 0xf0,
}

/**
 * @cluster IASWD
 */
export enum SirenConfigurationShiftRight {
    SirenLevel = 0x00,
    Strobe = 0x02,
    WarningMode = 0x04,
}

/**
 * @cluster IASWD
 * @type map8
 */
export enum SquawkConfigurationMask {
    SquawkLevel = 0x03,
    SquawkStrobeActive = 0x08,
    SquawkMode = 0xf0,
}

/**
 * @cluster IASWD
 */
export enum SquawkConfigurationShiftRight {
    SquawkLevel = 0x00,
    SquawkStrobeActive = 0x03,
    SquawkMode = 0x04,
}

/**
 * @cluster Commissioning
 * @type uint8
 */
export enum ProtocolVersion {
    Zigbee2006orLater = 0x02,
}

/**
 * @cluster Commissioning
 * @type uint8
 */
export enum StackProfile {
    ZigbeeStackProfile = 0x01,
    ZigbeeProStackProfile = 0x02,
}

/**
 * @cluster Commissioning
 * @type enum8
 */
export enum StartupControl {
    OnAnetwork = 0x00,
    FormNetwork = 0x01,
    RejoinNetwork = 0x02,
    JoinUsingMacassociation = 0x03,
}

/**
 * @cluster Commissioning
 * @type enum8
 */
export enum NetworkKeyType {
    StandardKey = 0x01,
}

/**
 * @cluster Commissioning
 * @type map8
 */
export enum OptionsMask {
    StartupMode = 0x07,
    Immediate = 0x08,
}

/**
 * @cluster Commissioning
 */
export enum OptionsShiftRight {
    Immediate = 0x03,
}

/**
 * @cluster TouchlinkCommissioning
 * @type uint8
 */
export enum TLKeyIndex {
    DevelopmentKey = 0x00,
    MasterKey = 0x04,
    CertificationKey = 0x0f,
}

/**
 * @cluster TouchlinkCommissioning
 * @type map8
 */
export enum TLZigbeeInformationMask {
    LogicalType = 0x03,
    RxOnWhenIdle = 0x04,
}

/**
 * @cluster TouchlinkCommissioning
 */
export enum TLZigbeeInformationShiftRight {
    RxOnWhenIdle = 0x02,
}

/**
 * @cluster TouchlinkCommissioning
 * @type map8
 */
export enum TLTouchlinkInformationMask {
    FactoryNew = 0x01,
    AddressAssignment = 0x02,
    LinkInitiator = 0x10,
    TouchlinkPriorityRequest = 0x20,
    ProfileInterop = 0x80,
}

/**
 * @cluster TouchlinkCommissioning
 */
export enum TLTouchlinkInformationShiftRight {
    AddressAssignment = 0x01,
    LinkInitiator = 0x04,
    TouchlinkPriorityRequest = 0x05,
    ProfileInterop = 0x07,
}

/**
 * @cluster TouchlinkCommissioning
 * @type uint8
 */
export enum TLVersionMask {
    ApplicationDeviceVersion = 0x0f,
}

/**
 * @cluster TouchlinkCommissioning
 */
export interface TLDeviceInformationRecord {
    iEEEAddress: string;
    endpointIdentifier: number;
    profileIndentifier: number;
    deviceIdentifier: number;
    version: number;
    groupIdentifierCount: number;
    sort: number;
}

/**
 * @cluster TouchlinkCommissioning
 * @type uint8
 */
export enum TLStatus {
    Success = 0x00,
    Failure = 0x01,
}

/**
 * @cluster TouchlinkCommissioning
 */
export interface TLGroupInformationRecord {
    groupIdentifier: number;
    groupType: number;
}

/**
 * @cluster TouchlinkCommissioning
 */
export interface TLEndpointInformationRecord {
    networkAddress: number;
    endpointIdentifier: number;
    profileIdentifier: number;
    deviceIdentifier: number;
    version: number;
}

/**
 * @cluster TouchlinkCommissioning
 * @type map16
 */
export enum KeyBitmaskMask {
    DevelopmentKey = 0x0001,
    MasterKey = 0x0010,
    CertificationKey = 0x8000,
}

/**
 * @cluster TouchlinkCommissioning
 */
export enum KeyBitmaskShiftRight {
    MasterKey = 0x04,
    CertificationKey = 0x15,
}

/**
 * @cluster OTAUpgrade
 * @type uint16
 */
export enum OTADeviceSpecificImageType {
    ClientSecurityCredentials = 0xffc0,
    ClientConfiguration = 0xffc1,
    ServerLog = 0xffc2,
    Picture = 0xffc3,
}

/**
 * @cluster OTAUpgrade
 * @type map8
 */
export enum FieldControlMask {
    HardwareVersionPresent = 0x01,
}

/**
 * @cluster OTAUpgrade
 * @type enum8
 */
export enum ImageUpgradeStatus {
    Normal = 0x00,
    DownloadInProgress = 0x01,
    DownloadComplete = 0x02,
    WaitingToUpgrade = 0x03,
    CountDown = 0x04,
    WaitForMore = 0x05,
    WaitingToUpgradeViaExternalEvent = 0x06,
}

/**
 * @cluster OTAUpgrade
 * @type enum8
 */
export enum UpgradeActivationPolicy {
    OtaserverActivationAllowed = 0x00,
    OutOfBandActivationOnly = 0x01,
}

/**
 * @cluster OTAUpgrade
 * @type enum8
 */
export enum UpgradeTimeoutPolicy {
    ApplyUpgradeAfterTimeout = 0x00,
    DoNotApplyUpgradeAfterTimeout = 0x01,
}

/**
 * @cluster OTAUpgrade
 * @type enum8
 */
export enum PayloadType {
    QueryJitter = 0x00,
    QueryJitterAndManufacturerCode = 0x01,
    QueryJitterManufacturerCodeAndImageType = 0x02,
    QueryJitterManufacturerCodeImageTypeAndNewFileVersion = 0x03,
}

/** ZCL non-values by type name (key of `ZclType`). */
export const ZCL_TYPE_INVALID_BY_TYPE_NAME: Readonly<Record<string, number | bigint>> = {
    Bool: 255,
    Uint8: 255,
    Uint16: 65535,
    Uint24: 16777215,
    Uint32: 4294967295,
    Uint40: 1099511627775,
    Uint48: 281474976710655,
    Uint56: 72057594037927935n,
    Uint64: 18446744073709551615n,
    Int8: -128,
    Int16: -32768,
    Int24: -8388608,
    Int32: -2147483648,
    Int40: -549755813888,
    Int48: -140737488355328,
    Int56: -36028797018963968n,
    Int64: -9223372036854775808n,
    Enum8: 255,
    Enum16: 65535,
    ToD: 4294967295,
    Date: 4294967295,
    Utc: 4294967295,
    ClusterId: 65535,
    AttribId: 65535,
    BacOid: 4294967295,
};

/** ZCL non-values by type ID (value of `ZclType`). */
export const ZCL_TYPE_INVALID_BY_TYPE: Readonly<Record<number, number | bigint>> = {
    /** Bool */
    16: 255,
    /** Uint8 */
    32: 255,
    /** Uint16 */
    33: 65535,
    /** Uint24 */
    34: 16777215,
    /** Uint32 */
    35: 4294967295,
    /** Uint40 */
    36: 1099511627775,
    /** Uint48 */
    37: 281474976710655,
    /** Uint56 */
    38: 72057594037927935n,
    /** Uint64 */
    39: 18446744073709551615n,
    /** Int8 */
    40: -128,
    /** Int16 */
    41: -32768,
    /** Int24 */
    42: -8388608,
    /** Int32 */
    43: -2147483648,
    /** Int40 */
    44: -549755813888,
    /** Int48 */
    45: -140737488355328,
    /** Int56 */
    46: -36028797018963968n,
    /** Int64 */
    47: -9223372036854775808n,
    /** Enum8 */
    48: 255,
    /** Enum16 */
    49: 65535,
    /** ToD */
    224: 4294967295,
    /** Date */
    225: 4294967295,
    /** Utc */
    226: 4294967295,
    /** ClusterId */
    232: 65535,
    /** AttribId */
    233: 65535,
    /** BacOid */
    234: 4294967295,
};
